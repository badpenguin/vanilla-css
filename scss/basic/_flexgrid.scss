@import "../mixin/flexgrid";
@import "../mixin/flexbox";
@import "../mixin/breakpoints";

/*
 * Thanks to
 * - https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 */

.grid {
	@include flex-grid;


	// Cells - by default are equal width
	.cell {
		//@include flex(1, 0, 0); - OLD behavior was not falling back to sm-1-1, so you always need to specify sm-x-y
		flex: 1 0 100%;
	}

	// NEW behavior: fall back to sm-1-1 and need grid--auto or cell--auto for auto size
	@include from_breakpoint(small) {
		&.grid--auto .cell {
			flex: 1 0 0;
		}

		// NOTE: 2021.01.19 adding "!important" allowed to control the cell at "XS" using "s-1-X" class.

		// ... or can grow automatically
		.cell {
			&.cell--auto {
				flex: 1 0 auto !important;
			}

			&.cell--size {
				flex: 0 0 auto !important;
			}

			&.cell--any {
				flex: 1 1 auto !important;
			}
		}

	}

	// Fixed size cells, non-responsive
	@include cell-builder(5, 's');

	// Responsive Cells
	@include from_breakpoint(small) {
		@include cell-builder(5, 'sm');
	}
	@include from_breakpoint(medium) {
		@include cell-builder(5, 'md');
	}
	@include from_breakpoint(large) {
		@include cell-builder(5, 'lg');
	}
	@include from_breakpoint(x-large) {
		@include cell-builder(5, 'xlg');
	}
	@include from_breakpoint(xx-large) {
		@include cell-builder(5, 'xxlg');
	}

}


// GRID Modifiers

.grid {

	// GUTTER (it still needs a bit more testing)

	&.grid--gutter {
		margin-right: -($vanilla-grid-gutter-size/2);
		margin-left: -($vanilla-grid-gutter-size/2);

		> .cell {
			padding-right: ($vanilla-grid-gutter-size/2);
			padding-left: ($vanilla-grid-gutter-size/2);
		}
	}

	&.grid--gutter-small {
		margin-right: -($vanilla-grid-gutter-size/4);
		margin-left: -($vanilla-grid-gutter-size/4);

		> .cell {
			padding-right: ($vanilla-grid-gutter-size/4);
			padding-left: ($vanilla-grid-gutter-size/4);
		}
	}

	&.grid--vgutter {

		margin-bottom: -$vanilla-grid-gutter-size;

		> .cell {
			margin-bottom: $vanilla-grid-gutter-size;
		}

		@media(max-width: $vanilla-breakpoint-medium) {
			margin-bottom: -($vanilla-grid-gutter-size/2);
			> .cell {
				margin-bottom: ($vanilla-grid-gutter-size/2);
			}
		}
	}

	&.grid--vgutter-small {

		margin-bottom: -($vanilla-grid-gutter-size/2);

		> .cell {
			margin-bottom: ($vanilla-grid-gutter-size/2);
		}

		@media(max-width: $vanilla-breakpoint-medium) {
			margin-bottom: -($vanilla-grid-gutter-size/4);
			> .cell {
				margin-bottom: ($vanilla-grid-gutter-size/4);
			}
		}
	}

	// Add space between grid following each others - cancel it using a parent container
	&.grid--vgutter + .grid--vgutter {
		margin-top: $vanilla-grid-gutter-size;
		@media(max-width: $vanilla-breakpoint-medium) {
			margin-top: ($vanilla-grid-gutter-size/2);
		}
	}


	&.grid--equalize {
		> .cell {
			@include flex-col-center;
		}
	}

}


// Cell modifies

.flex-grow, .grid .cell.flex-grow {
	flex-grow: 1;
}

.flex-shrink, .grid .cell.flex-shrink {
	flex-shrink: 1;
}


@if $vanilla-fix-ie11-flexbox == 1 {
	_:-ms-fullscreen, :root {
		.grid {
			.cell {
				max-width: 100%;
			}

			// Fixed size cells, non-responsive
			@include cell-builder-ie11-fix(5, 's');

			// Responsive Cells
			@include from_breakpoint(small) {
				@include cell-builder-ie11-fix(5, 'sm');
			}
			@include from_breakpoint(medium) {
				@include cell-builder-ie11-fix(5, 'md');
			}
			@include from_breakpoint(large) {
				@include cell-builder-ie11-fix(5, 'lg');
			}
			@include from_breakpoint(x-large) {
				@include cell-builder-ie11-fix(5, 'xlg');
			}
			@include from_breakpoint(xx-large) {
				@include cell-builder-ie11-fix(5, 'xxlg');
			}

		}
	}
}